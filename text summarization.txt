1) Tyoes of summarization:
In general there are two types of summarization, abstractive and extractive summarization.
2) Abstractive summarization:
Input document ? understand context ? semantics ? create own summary.
It also mature enogh to combine two words and create a new one which is not  present in the document
3) Extractive Summarization: 
Select relevant phrases of the input document and concatenate them to form a summary (like “copy-and-paste”).
Pros: They are quite robust since they use existing natural-language phrases that are taken straight from the input.
Cons: But they lack in flexibility since they cannot use novel words or connectors. They also cannot paraphrase like people sometimes do.
Input document ? sentences similarity ? weight sentences ? select sentences with higher rank.
The limited study is available for abstractive summarization as it requires a deeper understanding of the text as compared to the extractive approach.
Purely extractive summaries often times give better results compared to automatic abstractive summaries. This is because of the fact that abstractive
summarization methods cope with problems such as semantic representation, inference and natural language generation which is relatively harder 
than data-driven approaches such as sentence extraction.
4) How to find similarity between sentence?
It’s good to understand Cosine similarity to make the best use of code you are going to see.
Cosine similarity is a measure of similarity between two non-zero vectors of an inner product space that measures the cosine of the angle between them.
Since we will be representing our sentences as the bunch of vectors, we can use it to find the similarity among sentences. 
Its measures cosine of the angle between vectors. Angle will be 0 if sentences are similar.
5) Eg:
Input article ? split into sentences ? remove stop words ? build a similarity matrix ? generate rank based on matrix ? pick top N sentences for summary.
It can be done using summarize function of gensim
6)Single document summarization
summary = summarize(document)
7)Multi-document summarization
summary = summarize(document_1, document_2, …)
8) what is gensim?
gensim.summarization module implements TextRank, an unsupervised algorithm based 
TextRank works as follows:
Pre-process the text: remove stop words and stem the remaining words.
Create a graph where vertices are sentences.
Connect every sentence to every other sentence by an edge. The weight of the edge is how similar the two sentences are.
Run the PageRank algorithm on the graph.
Pick the vertices(sentences) with the highest PageRank score
8) We have different summarisation technique in extractive they are gensim(textlab), lexrank ,PyTeaser , PyTextRank and so on.It differs mostly in different method
it used to check  the similarity between the sentence i.e cosine similarity, jaccord similarity and so on.
Abstractive is mainly RNN (sequence  to sequence) neural network.


https://towardsdatascience.com/data-scientists-guide-to-summarization-fc0db952e363 - very nice so far

Text Summarization with Spicy : https://www.youtube.com/watch?v=XcZGKAF5zxg&t=90s
https://stackabuse.com/text-summarization-with-nltk-in-python/
https://www.analyticsvidhya.com/blog/2018/11/introduction-text-summarization-textrank-python/
https://www.youtube.com/watch?v=8p9nHmtwk0o
https://www.machinelearningplus.com/nlp/gensim-tutorial/